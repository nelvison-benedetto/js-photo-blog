// document.addEventListener("DOMContentLoaded", ()=>{
//     const eList = document.createElement("ul");
//     document.querySelector("main").appendChild(eList);

//     function getEmails(){
//         for(let i=0;i<10;i++){
//             axios.get("https://flynn.boolean.careers/exercises/api/random/mail")
//                 .then((response)=>{  //.then effettua trasforma automaticamente obj json->obj js evitando  JSON.parse() 
//                     const email = response.data.response;
//                     const listEl = document.createElement("li");
//                     listEl.textContent = email;
//                     eList.appendChild(listEl);
//                 })
//                 .catch((error)=>{console.log(error);})
//                 .then(()=>{})
//         }
//     }
//     getEmails();
// });


// "albumId": 1,
// "id": 1,
// "title": "accusamus beatae ad facilis cum similique qui sunt",
// "url": "https://via.placeholder.com/600/92c952",
// "thumbnailUrl": "https://via.placeholder.com/150/92c952"
// },

const photos = document.getElementById('photos');  //non generated by js
const all_descrp = document.querySelectorAll('.descrp');
let objphotos = [];
let totMarkup = "";

document.addEventListener('DOMContentLoaded',()=>{
    function getUser(){
        axios.get('https://jsonplaceholder.typicode.com/photos?_limit=6')
        .then((response)=>{
            objphotos = response.data;
            //objphotos.forEach((item,index)=>{all_descrp[index].textContent = item.title; });
            objphotos.forEach((item) => {
                const markup = generatePhoto(item); // Usa il nome corretto della funzione
                totMarkup += markup;
            });
            photos.innerHTML = totMarkup;
            // created items html!
            truncateText(42);

        })
        .catch((error)=>{console.log(`error ${error}`);})
        .then(()=>{console.log('successful transaction')})
    }
    getUser();

    function truncateText(maxchars){
        totMarkup = "";
        objphotos.forEach((item,index)=>{
            let fullText = item.title;
            if(fullText.length > maxchars){
                let editDescrp = fullText.slice(0,maxchars)+`<span style="color: #1da1f2; font-weight: bolder;">...more</span>`;
                item.truncTitle = editDescrp;  //new key-value

                const tempphoto = {
                    albumId : item.albumId,
                    id : item.id,
                    title : item.truncTitle,
                    url :  item.url,
                    thumbnailUrl : item.thumbnailUrl
                };
                const murkup = generatePhoto(tempphoto);
                totMarkup += murkup;
            }
            else {
                const murkup = generatePhoto(item);
                totMarkup += murkup;
            }
        });
        photos.innerHTML = totMarkup;
    }
});

//GENERATE build card to use for all cards, and add it in html, with descr + photo. Adjust size photo & cards!

function generatePhoto(photo){
    const{albumId,id,title,url,thumbnailUrl} = photo;
    return `
    <div class="col">
        <div class="bg-white px-3 pt-3 d-flex justify-content-center position-relative custom-card">
            <div class="d-flex flex-column gap-2 card-content">
                <div class="inner-image bg-purple1 d-flex justify-content-center align-items-center">
                    <span class="font-arial text-secondary">600 x 600</span>
                </div>
                <p class="descrp">${title}</p>
            </div>
            <img
                src="./assets/img/pin.svg"
                class="pin-card position-absolute top-0"
                alt="pin card"
            />   
        </div>
    </div>
    `;
}




